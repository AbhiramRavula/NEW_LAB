Certainly! Below you’ll find step-by-step guides—with code, installation, and explanations suitable for complete beginners—for several of the listed lab programs (React and Node.js). Each program will include the full setup and coding steps, written for clarity. Due to space, I’ll explain the first few in depth, and outline the approach for remaining ones. Just ask for any specific code samples if you want expanded detail for any additional experiment.

# 1. Create a Simple React Application (Hello World)

### Step 1: Install Node.js

- Download Node.js from https://nodejs.org and install it. This includes the "npm" package manager.

### Step 2: Create a React App

Open your terminal and run:

```bash
npx create-react-app hello-world-app
```

- This creates a new folder called `hello-world-app` with all React files.

### Step 3: Start Your App

```bash
cd hello-world-app
npm start
```

- `npm start` runs the React development server. Your browser should open to http://localhost:3000.

### Step 4: Edit to Show "Hello World"

Open `src/App.js` in your code editor (Notepad, VS Code, etc). Replace the content with:

```jsx
function App() {
  return (
    
      Hello World
    
  );
}

export default App;
```

Save the file. The browser will update to show "Hello World".

# 2. Create a Basic Calculator Application Using React JS

### Step 1: Setup React App

Follow the steps above to create a React app called `react-calculator`.

### Step 2: Edit the App

Replace the code in `src/App.js` with a simple calculator:

```jsx
import React, { useState } from "react";

function App() {
  const [num1, setNum1] = useState(0);
  const [num2, setNum2] = useState(0);
  const [result, setResult] = useState(null);

  const handleSum = () => setResult(Number(num1) + Number(num2));
  const handleSub = () => setResult(Number(num1) - Number(num2));
  const handleMul = () => setResult(Number(num1) * Number(num2));
  const handleDiv = () => setResult(Number(num1) / Number(num2));

  return (
    
      Simple Calculator
       setNum1(e.target.value)} placeholder="First Number"/>
       setNum2(e.target.value)} placeholder="Second Number"/>
      
        Add
        Subtract
        Multiply
        Divide
      
      Result: {result}
    
  );
}

export default App;
```

Save, the app now works as a calculator.

# 3. Build a Music Store Application Using React Components

### Step 1: Setup Project

Create your app:

```bash
npx create-react-app music-store
cd music-store
```

### Step 2: Add Music Store Components

Replace `src/App.js` with this code:

```jsx
import React, { useState } from "react";

const albums = [
  { id: 1, title: "Album One", artist: "Artist A", price: 10 },
  { id: 2, title: "Album Two", artist: "Artist B", price: 12 },
  { id: 3, title: "Album Three", artist: "Artist C", price: 9 }
];

function App() {
  const [cart, setCart] = useState([]);

  const addToCart = album => setCart([...cart, album]);

  return (
    
      Music Store
      Albums
      {albums.map(album => (
        
          {album.title} by {album.artist} - ${album.price}
           addToCart(album)}>Add to Cart
        
      ))}
      Cart
      
        {cart.map((album, idx) => (
          {album.title} - ${album.price}
        ))}
      
    
  );
}

export default App;
```

Run `npm start` to see the Music Store in action.

# 4. Create Simple Web Server Application Using Node.js

### Step 1: Install Node.js

- Node.js must be installed as above.

### Step 2: Create the App

Create a folder, e.g. `node-server`, and inside it create a file called `server.js`.

```javascript
// server.js
const http = require("http");

const server = http.createServer((req, res) => {
  res.writeHead(200, {"Content-Type": "text/plain"});
  res.end("Hello from Node.js server!");
});

server.listen(3000, () => {
  console.log("Server is running at http://localhost:3000");
});
```

### Step 3: Run the Server

In terminal, navigate to the folder, then run:

```bash
node server.js
```

Open your browser and go to [http://localhost:3000](http://localhost:3000).

# 5. Create a Basic Express Website Using Node.js

### Step 1: Install Express

1. Create a folder, e.g. `express-site`.
2. Run in terminal:

```bash
npm init -y
npm install express
```

### Step 2: `app.js` Code

Create a file called `app.js`:

```javascript
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Welcome to Express!');
});

app.listen(3000, () => {
  console.log('Express server running on http://localhost:3000');
});
```

### Step 3: Run the Site

```bash
node app.js
```

Open your browser at http://localhost:3000 to see your message.

# Next Steps for Other Projects

For each project (login system, blogs, book store, etc.), the steps are similar:

1. **Set up Node.js/React and any necessary dependencies.**
2. **Create your main server file (Node/Express) or main app file (React).**
3. **Add the basic logic for the app.**
4. **Run and test accordingly.**

Let me know any specific program you’d like a complete beginner’s walkthrough for (from 6 to 15, for example: Login System, Blog System, Book Store, Portfolio App, etc.) and I’ll provide a detailed code and explanation for that experiment!


Certainly! Continuing from where the previous answer left off, here are detailed, step-by-step guides for the next set of beginner-friendly Node.js projects (experiments 6–10). Each includes install instructions, code samples, and explanations suitable for a complete beginner.

## 6. Design a Simple User Login System Using Node.js

### Step 1: Set Up Your Project

```bash
mkdir node-login-system
cd node-login-system
npm init -y
npm install express body-parser
```

### Step 2: Create `app.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.urlencoded({ extended: true }));

// Dummy user for demonstration
const user = { username: 'admin', password: 'admin123' };

// Login form
app.get('/', (req, res) => {
  res.send(`
    
    
    Login
  `);
});

// Handle login
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  if (username === user.username && password === user.password) {
    res.send('Login successful! Welcome.');
  } else {
    res.send('Login failed. Please try again.');
  }
});

app.listen(3000, () => {
  console.log('Login app running on http://localhost:3000');
});
```

### Step 3: Run It

```bash
node app.js
```

Visit http://localhost:3000 and try logging in with username: `admin`, password: `admin123`.

## 7. Design Node Blog System (Basic, No Database)

### Step 1: Set Up Project

```bash
mkdir node-blog
cd node-blog
npm init -y
npm install express body-parser
```

### Step 2: `app.js` Code

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

let posts = [];

app.use(bodyParser.urlencoded({ extended: true }));

// Display posts and a form
app.get('/', (req, res) => {
  let postList = posts.map(p => `${p.title}${p.content}`).join('');
  res.send(`${postList}
    
    
    Add Post
  `);
});

// Add post
app.post('/add', (req, res) => {
  posts.push({ title: req.body.title, content: req.body.content });
  res.redirect('/');
});

app.listen(3000, () => {
  console.log('Blog app running on http://localhost:3000');
});
```

## 8. Design Book Store System (Basic Demo)

### Step 1: Setup

```bash
mkdir book-store
cd book-store
npm init -y
npm install express body-parser
```

### Step 2: `app.js` Code

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

let books = [
  { title: "The Hobbit", author: "J.R.R. Tolkien", price: 15 },
  { title: "1984", author: "George Orwell", price: 12 }
];

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
  let bookList = books.map(b => `${b.title} by ${b.author} - $${b.price}`).join('');
  res.send(`Book Store${bookList}
    
      
      
      
      Add Book
    `);
});

app.post('/add', (req, res) => {
  books.push({ title: req.body.title, author: req.body.author, price: req.body.price });
  res.redirect('/');
});

app.listen(3000, () => {
  console.log('Book store running on http://localhost:3000');
});
```

## 9. Design a Portfolio App (React)

### Step 1: Create React App

```bash
npx create-react-app my-portfolio
cd my-portfolio
```

### Step 2: Edit `src/App.js`

```jsx
function App() {
  return (
    
      Your Name
      Portfolio
      
        Project 1: Portfolio Website
        Project 2: Calculator App
        Project 3: Blog Platform
      
      Contact: youremail@example.com
    
  );
}

export default App;
```

Run with:

```bash
npm start
```

## 10. Design a Simple Online Quiz System (Basic, Node.js)

### Step 1: Setup

```bash
mkdir quiz-app
cd quiz-app
npm init -y
npm install express body-parser
```

### Step 2: `app.js` Code

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

const questions = [
  { q: "2 + 2?", a: "4" },
  { q: "Capital of France?", a: "Paris" }
];

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
  let quiz = questions.map((item, idx) =>
    `${item.q}`).join('');
  res.send(`${quiz}Submit`);
});

app.post('/submit', (req, res) => {
  let score = questions.reduce((acc, q, idx) => acc + (req.body[`q${idx}`] == q.a ? 1 : 0), 0);
  res.send(`Score: ${score}/${questions.length}`);
});

app.listen(3000, () => {
  console.log('Quiz app running on http://localhost:3000');
});
```

**You can run any of these by saving the code as `app.js` and following the install instructions. If you’d like the remaining experiments (11–15) explained step-by-step, just reply with “continue” or specify a number for deeper detail!**



Certainly! Continuing with detailed beginner-friendly instructions for experiments 11–15, including setup, code, and explanations.

## 11. Create a Job Listing Site (Basic Node.js + Express)

### Step 1: Setup Project

```bash
mkdir job-listing-site
cd job-listing-site
npm init -y
npm install express body-parser
```

### Step 2: Create `app.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

let jobs = [
  { title: "Frontend Developer", company: "Tech Corp", location: "New York" },
  { title: "Backend Developer", company: "Innovate Ltd", location: "Boston" }
];

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
  let jobList = jobs.map(job =>
    `${job.title} at ${job.company} (${job.location})`
  ).join('');
  res.send(`Job Listings${jobList}
    Add a Job
    
      
      
      
      Add Job
    `);
});

app.post('/add', (req, res) => {
  jobs.push({ title: req.body.title, company: req.body.company, location: req.body.location });
  res.redirect('/');
});

app.listen(3000, () => {
  console.log('Job listing site running on http://localhost:3000');
});
```

Run with:

```bash
node app.js
```

## 12. Build a Product Inventory System in Node.js + MySQL

### Step 1: Setup Project

```bash
mkdir product-inventory
cd product-inventory
npm init -y
npm install express body-parser mysql2
```

Make sure MySQL is installed on your system and running.

### Step 2: Create Database and Table

Log into MySQL and run:

```sql
CREATE DATABASE inventory_db;
USE inventory_db;
CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255),
  quantity INT,
  price DECIMAL(10,2)
);
```

### Step 3: Create `app.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2');
const app = express();

app.use(bodyParser.urlencoded({ extended: true }));

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',       // Use your MySQL username
  password: '',       // Use your MySQL password
  database: 'inventory_db'
});

connection.connect(err => {
  if (err) throw err;
  console.log('Connected to MySQL database');
});

app.get('/', (req, res) => {
  connection.query('SELECT * FROM products', (err, results) => {
    if (err) throw err;
    let productList = results.map(p => 
      `${p.name} - Qty: ${p.quantity} - $${p.price}`).join('');
    res.send(`Product Inventory${productList}
      Add Product
      
        
        
        
        Add Product
      `);
  });
});

app.post('/add', (req, res) => {
  const { name, quantity, price } = req.body;
  const sql = 'INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)';
  connection.query(sql, [name, quantity, price], (err) => {
    if (err) throw err;
    res.redirect('/');
  });
});

app.listen(3000, () => {
  console.log('Inventory system running on http://localhost:3000');
});
```

Run with:

```bash
node app.js
```

## 13. Build a Chat Application Using React and Socket.io

### Step 1: Setup Backend (Node.js + Socket.io)

Create a folder `chat-app`:

```bash
mkdir chat-app
cd chat-app
npm init -y
npm install express socket.io
```

Create `server.js`:

```javascript
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

io.on('connection', (socket) => {
  console.log('a user connected');
  socket.on('chat message', msg => {
    io.emit('chat message', msg);
  });
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});

server.listen(3000, () => {
  console.log('Chat server running on http://localhost:3000');
});
```

Create `index.html` in the same folder:

```html


  Chat
  
    
    
      Send
    
    
    
      var socket = io();
      var form = document.getElementById('form');
      var input = document.getElementById('input');
      var messages = document.getElementById('messages');

      form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
          socket.emit('chat message', input.value);
          input.value = '';
        }
      });

      socket.on('chat message', function(msg) {
        var item = document.createElement('li');
        item.textContent = msg;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });
    
  

```

Run with:

```bash
node server.js
```

## 14. Create a Student Result Management App (Basic Node.js)

### Step 1: Setup Project

```bash
mkdir student-results
cd student-results
npm init -y
npm install express body-parser
```

### Step 2: Create `app.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

let students = [];

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
  let studentList = students.map(s => 
    `${s.name} - Grade: ${s.grade}`).join('');
  res.send(`Student Results${studentList}
    
      
      
      Add Result
    `);
});

app.post('/add', (req, res) => {
  students.push({ name: req.body.name, grade: req.body.grade });
  res.redirect('/');
});

app.listen(3000, () => {
  console.log('Student result app running on http://localhost:3000');
});
```

## 15. Design Node E-learning System (Basic Demo)

### Step 1: Setup Project

```bash
mkdir elearning-system
cd elearning-system
npm init -y
npm install express body-parser
```

### Step 2: Create `app.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

let courses = [
  { id: 1, title: 'JavaScript Basics', description: 'Learn the basics of JS' },
  { id: 2, title: 'Node.js Introduction', description: 'Start with Node.js' }
];

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
  let courseList = courses.map(c => 
    `${c.title}${c.description}`).join('');
  res.send(`E-learning Courses${courseList}
    Add Course
    
      
      
      Add Course
    `);
});

app.post('/add', (req, res) => {
  let newId = courses.length + 1;
  courses.push({ id: newId, title: req.body.title, description: req.body.description });
  res.redirect('/');
});

app.listen(3000, () => {
  console.log('E-learning system running on http://localhost:3000');
});
```

You can run each Node.js app by navigating to its folder and running `node app.js` (or `node server.js` if named so). These examples provide simple structures for full beginner understanding.

If you want me to help with any additional features, client-side code, or more advanced versions, just ask!